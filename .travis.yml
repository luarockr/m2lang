dist: xenial
language: cpp
sudo: false

matrix:
  include:
    - os: linux
      env: LLVM_VERSION=9.0.0
      compiler: clang
      arch: amd64
    - os: linux
      env: LLVM_VERSION=8.0.0
      compiler: clang
      arch: amd64
    - os: linux
      env: LLVM_VERSION=7.0.1
      compiler: gcc
      arch: amd64
    - os: osx
      osx_image: xcode9.4
      env: LLVM_VERSION=7.0.0
    - os: osx
      osx_image: xcode10.1
      env: LLVM_VERSION=7.0.0
    - os: windows
      env: LLVM_VERSION=7.0.1
  allow_failures:
    - os: windows

cache:
  directories:
    - distpackages

addons:
  apt:
    packages:
    - ninja-build

before_install:
  - export DISTPACKAGES=$PWD/distpackages
  - mkdir -p $DISTPACKAGES
  # Should be part of addons
  - |
    if [ "${TRAVIS_OS_NAME}" = "windows" ]; then
      choco install ninja python
      export PATH="/c/Python37:/c/Python37/Scripts:$PATH"
      ./scripts/vcenv.bat | sed -e 's/\\/\//g' -e 's/C:/\/c/g' -e 's/;/:/g' > /tmp/vcenv.sh
      source /tmp/vcenv.sh
      export CC=cl.exe
      export CXX=cl.exe
    fi
    if [ "$TRAVIS_OS_NAME" = "osx" ]; then
      wget -O ninja-mac.zip https://github.com/ninja-build/ninja/releases/download/v1.9.0/ninja-mac.zip
      mkdir ninja
      tar -xf ninja-mac.zip -C ninja
      rm ninja-mac.zip
      export PATH="$PWD/ninja:$PATH"
    fi

install:
  - |
    export LLVM_ROOT_DIR="$PWD/llvm"
    mkdir -p $LLVM_ROOT_DIR
    if  [ "${TRAVIS_OS_NAME}" = "windows" ]; then
      export LLVMDIST_FILE=llvm-$LLVM_VERSION-windows-x86-withAsserts-clang.7z
      export LLVMDIST_URL=https://github.com/ldc-developers/llvm/releases/download/ldc-v$LLVM_VERSION/$LLVMDIST_FILE
      if [ ! -e "$DISTPACKAGES/$LLVMDIST_FILE" ]; then
        wget -O $DISTPACKAGES/$LLVMDIST_FILE $LLVMDIST_URL
        7z x $DISTPACKAGES/$LLVMDIST_FILE -o$LLVM_ROOT_DIR
      fi
    else
      if [ "${TRAVIS_OS_NAME}" = "linux" ]; then
        if [ "${LLVM_VERSION}" = "4.0.1" ]; then
          export LLVM_ARCH="x86_64-linux-gnu-debian8"
        elif [ "$TRAVIS_CPU_ARCH" = "ppc64le" ]; then
          export LLVM_ARCH="powerpc64le-linux-gnu-ubuntu-18.04"
        else
          export LLVM_ARCH="x86_64-linux-gnu-ubuntu-18.04"
        fi
      else
        export LLVM_ARCH="x86_64-apple-darwin"
      fi
      export LLVMDIST_FILE=clang+llvm-$LLVM_VERSION-${LLVM_ARCH}.tar.xz
      export LLVMDIST_URL=http://releases.llvm.org/$LLVM_VERSION/$LLVMDIST_FILE
      if [ ! -e "$DISTPACKAGES/$LLVMDIST_FILE" ]; then
        wget -O $DISTPACKAGES/$LLVMDIST_FILE $LLVMDIST_URL
        tar -xf $DISTPACKAGES/$LLVMDIST_FILE --strip 1 -C $LLVM_ROOT_DIR
      fi
    fi
  - export LLVM_CMAKE_DIR="$($LLVM_ROOT_DIR/bin/llvm-config --cmakedir)"
  - pip install --user lit
  - if [ "${TRAVIS_OS_NAME}" = "linux" ]; then ld --version; fi
  - cmake --version
  - ninja --version
  - python --version
  - python -c "import lit; lit.main();" --version | head -n 1

script:
  # Invoke CMake to generate the Ninja build files.
  - export SRC_DIR="$PWD"
  - mkdir ../build && cd ../build
  - cmake -G Ninja -DCMAKE_INSTALL_PREFIX=$LLVM_CMAKE_DIR ${SRC_DIR}
  - ninja -j3
